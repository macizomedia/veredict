generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id                 Int          @id @default(autoincrement())
  slug               String       @unique
  status             PostStatus   @default(DRAFT)
  categoryId         Int?
  currentRevisionId  Int?         @unique
  upVotes            Int          @default(0)
  downVotes          Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  // Relationships
  category           Category?    @relation(fields: [categoryId], references: [id])
  currentRevision    Revision?    @relation("CurrentRevision", fields: [currentRevisionId], references: [id])
  revisions          Revision[]   @relation("PostRevisions")
  authors            PostAuthor[]
  analytics          Analytics?
  internalComments   Comment[]
  labels             PostLabel[]
  sources            Source[]
  votes              Vote[]

  @@index([createdAt])
  @@index([status])
  @@index([categoryId])
  @@index([slug])
  @@map("Post")
}

model Revision {
  id               Int        @id @default(autoincrement())
  title            String
  contentBlocks    Json?
  prompt           String
  tone             String
  style            String
  minRead          Int
  location         Json?
  summaryOfChanges String?
  version          Int        @default(1)
  postId           Int
  parentId         Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relationships
  post             Post       @relation("PostRevisions", fields: [postId], references: [id], onDelete: Cascade)
  parent           Revision?  @relation("RevisionHistory", fields: [parentId], references: [id])
  children         Revision[] @relation("RevisionHistory")
  currentPost      Post?      @relation("CurrentRevision")

  @@index([postId])
  @@index([version])
  @@index([createdAt])
  @@map("Revision")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Source {
  id     Int    @id @default(autoincrement())
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLabel {
  id            Int       @id @default(autoincrement())
  postId        Int
  label         LabelType
  version       Int
  justification String
  sourceUrl     String?
  count         Int       @default(0)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Analytics {
  id           Int      @id @default(autoincrement())
  postId       Int      @unique
  views        Int      @default(0)
  sourceClicks Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  role             Role         @default(AUTHOR)
  reputation       Int          @default(0)
  accounts         Account[]
  internalComments Comment[]
  authoredPosts    PostAuthor[]
  sessions         Session[]
  votes            Vote[]
}

model PostAuthor {
  postId Int
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model Vote {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DISPUTED
}

enum LabelType {
  FAKE
  NOT_CHECKED
  IN_DEVELOPMENT
  OFFICIAL_PRESS_RELEASE
  ACCURATE
  INACCURATE
}

enum Role {
  AUTHOR
  EDITOR
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
