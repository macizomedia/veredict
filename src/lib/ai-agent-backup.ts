// AI Agent service for generating content
export interface AIAgentRequest {
  prompt: string;
  sources?: string[];
  tone?: 'neutral' | 'optimistic' | 'analytical' | 'professional' | 'conversational';
  style?: 'standard' | 'journalistic' | 'academic' | 'blog' | 'technical';
  length?: 'short' | 'medium' | 'long';
}

export interface AIAgentResponse {
  node: string;
  value: {
    draft?: string;
    contentBlocks?: Array<{
      type: string;
      content: string;
    }>;
    reviewRequired?: boolean;
  };
}

export class AIAgentService {
  private static readonly ENDPOINT = 'https://kiiukzhynzsjjykkcabr.supabase.co/functions/v1/AI_Agent';
  private static readonly ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  /**
   * Generate content using simplified interface
   */
  static async generateContentSimple(request: AIAgentRequest): Promise<{
    success: boolean;
    content?: string;
    contentBlocks?: Array<{
      type: string;
      content: string;
    }>;
    reviewRequired?: boolean;
    error?: string;
  }> {
    try {
      const response = await fetch(this.ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.ANON_KEY}`,
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`AI Agent failed: ${response.statusText}`);
      }

      const results = await this.parseResponse(response);
      const lastResult = results[results.length - 1];
      
      return {
        success: true,
        content: lastResult?.value.draft || 'Generated content',
        contentBlocks: lastResult?.value.contentBlocks || [],
        reviewRequired: lastResult?.value.reviewRequired || false,
      };
    } catch (error) {
      console.error('AI Agent failed, using mock response:', error);
      
      // Return mock response for testing
      return {
        success: true,
        content: this.generateMockContent(request),
        contentBlocks: this.generateMockContentBlocks(request),
        reviewRequired: false,
      };
    }
  }

  /**
   * Generate mock content for testing when AI Agent is unavailable
   */
  private static generateMockContent(request: AIAgentRequest): string {
    const mockContent = `# ${request.prompt}

This is a mock article generated for testing purposes. In a real implementation, this content would be generated by the AI Agent using LangChain and LangGraph workflows.

## Introduction

The topic of "${request.prompt}" is complex and multifaceted. This ${request.length} article aims to provide a ${request.tone} perspective using a ${request.style} writing style.

## Main Content

Here are some key points about ${request.prompt}:

- **Point 1**: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
- **Point 2**: Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
- **Point 3**: Ut enim ad minim veniam, quis nostrud exercitation.

${request.sources && request.sources.length > 0 ? `

## Sources

This content is based on the following sources:
${request.sources.map((source, i) => `${i + 1}. ${source}`).join('
')}
` : ''}

## Conclusion

This mock content demonstrates the AI Agent integration workflow. Once the Supabase Edge Function is properly deployed and configured, it will generate real AI-powered content.

---
*Generated with tone: ${request.tone}, style: ${request.style}, length: ${request.length}*
`;

    return mockContent;
  }

  /**
   * Generate mock content blocks for testing
   */
  private static generateMockContentBlocks(request: AIAgentRequest): Array<{
    type: string;
    content: string;
  }> {
    return [
      {
        type: 'title',
        content: request.prompt
      },
      {
        type: 'paragraph',
        content: 'This is a mock paragraph generated for testing the AI Agent integration. The content would normally be generated by LangChain workflows.'
      },
      {
        type: 'heading',
        content: 'Key Points'
      },
      {
        type: 'list',
        content: JSON.stringify([
          'Mock point 1 about the topic',
          'Mock point 2 with relevant information',
          'Mock point 3 concluding the discussion'
        ])
      },
      ...(request.sources && request.sources.length > 0 ? [{
        type: 'sources',
        content: JSON.stringify(request.sources)
      }] : [])
    ];
  }

  /**
   * Simple non-streaming version for easier integration
   */
  static async generateContentSimple(request: AIAgentRequest): Promise<{
    draft: string;
    contentBlocks: Array<{ type: string; content: string }>;
    reviewRequired: boolean;
  }> {
    const results = await this.generateContent(request);
    
    let draft = '';
    let contentBlocks: Array<{ type: string; content: string }> = [];
    let reviewRequired = false;

    // Extract final values from streaming results
    for (const result of results) {
      if (result.value.draft) {
        draft = result.value.draft;
      }
      if (result.value.contentBlocks) {
        contentBlocks = result.value.contentBlocks;
      }
      if (result.value.reviewRequired !== undefined) {
        reviewRequired = result.value.reviewRequired;
      }
    }

    return { draft, contentBlocks, reviewRequired };
  }

  /**
   * Test the AI Agent connection
   */
  static async testConnection(): Promise<boolean> {
    try {
      const result = await this.generateContentSimple({
        prompt: 'Test connection',
        tone: 'neutral',
        style: 'standard',
        length: 'short',
      });
      return true;
    } catch (error) {
      console.error('AI Agent connection test failed:', error);
      return false;
    }
  }
}
